我在创业公司这三年
==================
:slug: my-time-in-the-startup
:date: 2024-09-09
:tags: 创业, startup

.. contents::

前言
----
三年前，我从某芯片大厂离职，之后作为 2 号研发，加入了一家连名字都还没确定的初创公司。这三年，我见证了公司的成长，无论公司发展好坏，于我而言，这都是一段非常宝贵的经历。人总是健忘的，所以我把这些想法写在这里，作一个快照。

我在 B 站最喜欢的 B 站 up 主之一影视飓风，出过众多优秀的作品：关于摄影、关于人文、关于自然、关于科学……但唯有一期 `【2023】一个百大UP主的创业故事（2） <https://www.bilibili.com/video/BV17u411E7UK>`_ ，让我记忆深刻。这当然不是说其他视频不够好，而且这一期让我产生了共鸣。虽然处于完全不同的行业，而且 Tim 是老板，我只是一个打工人，但从视频中能看到创业公司面临的种种相似的问题，我很佩服也很羡慕 Tim 能从中获取经验并迅速纠正路线，让公司向好的方向发展。

管理是一门学问
--------------

当我写下这个副标题，大多数人会讲「这样的常识还需要讲吗？」但作为大多数底层打工人，也许真只有在创业公司呆过，才能切身体会其中的含义。

我在大厂工作时，从来不认为管理是什么难事，天真地认为只要一心一意做技术，工程上的问题，没有什么不能成。那是因为一家成熟的大企业，已经有了完整的管理体系和制度规范，对于大多数 manager 来说，只要照着公司给的模板走，总不会出太大岔子，而一切事物的运作流程，都看起来那么理所应当。

而创业则完全不同，由于没有完善的管理制度、招人困难导致人员水平的参差、缺乏完善的各类系统等等问题，使管理难度骤然提升。在这样的情况下，还需要让团队像充满润滑油的齿轮组一样流流畅的运转，是非常困难的事情。而那些在大厂日常工作中不起眼的、认为本应该顺利的琐事，都成为需要消耗大量时间和精力解决的麻烦。

举个例子，大厂中从 R&D，到 QA，到 DevOps，到 IT，每个部门各司其职。R&D 负责开发，QA 负责测试，Tools 负责提供内部工具，IT 作为庞大基础设施的有力保证，虽然经常也出些小 bug，但大多数时候都井然有序。创业则不同，公司不能为其中每一环都招一个团队，大多数时候 R&D 需要身兼数职；而缺乏 DevOps 对内部工具的统一支持，加上每个人对 Git 的熟悉程度不同，使得每个研发按自己的节奏运行；小到分支管理，大到发版，没有完整的系统支撑，都变得困难重重。一个 feature 的整合，可能需要花掉数个 man-week。研发管理如此，人事管理亦然。

而管理的一部分，则是用系统、制度，来规范人的行为，使得具有不同天性、习惯和能力的人，能在统一框架和体系下协调的工作。在创业这样的缺人、缺钱、缺资源的情况下，还需要根据公司实际情况，从零开始搭建这样的规范和系统，对管理者有极高的要求。

另一方面，系统和制度是死的，人却是活的，所以管理的另一部分，是艺术。如果用制度把所有人都限制在规定的范围内，忽略个人的个性，那么一家公司就没有创新可言，也必然是死水一潭。


沟通，才是发展的关键
--------------------
meme


Before you try to change something, make sure you can change nothing
--------------------------------------------------------------------
https://devblogs.microsoft.com/oldnewthing/20240513-00/?p=109750，包括管理。

K.I.S.S
-------

Keep It Simple and Stupid, 源自 FIXME。但这个概念不仅仅适用于工具，也适用于公司中的种种系统合制度。

人脑总是倾向于简单的东西，而对复杂繁琐的事物容易产生抵触情绪。好的工具总是简单明了。如果一个工具过于复杂，人总是潜意识里不愿意去使用。比如，我非常讨厌 Makefile 中的隐式规则，以及不明意义容易混淆的 `$@`、 `$^`、`$<` 等等隐式变量，以至于我非常抵触写 Makefile。管理系统也一样 -- 我们使用的 Teambition 作为任务管理系统，有着极其反人类的 UX 设计和糟糕的搜索功能，让我不愿意点开它，以至于我在前司养成的事无巨细都详细记录的习惯完全丧失。

如果一个系统或者制度复杂到让人难以理解或产生抵触情绪，那么大部分就不愿使用或遵守；并且由于上面提到的信息传递的损失，让每个人产生不同的理解，在执行中出现各种偏差。这会使得系统难以推广，制度难以落实。我认为这是 Teambition 在公司一直没能有效利用的原因。

但是世界不总是简单的，一个团队的协作也离不开各种复杂的规则，那么为了保证 K.I.S.S，除了好用的工具和系统外，我认为有两点，1. 是对每种角色直接给出具体的指令，越具体越好；2. 需要越多人执行的步骤应当越简单，把复杂的步骤留给可控的少数人。

例如，对于一个复杂的代码管理系统，为了满足不同的场景，可能需要复杂的分支管理策略、版本控制策略、CI/CD 流程。但是对于大多数开发者，他们并关心版本控制，甚至他们分不清 merge 和 rebase 的差别，那么长篇大论的讲代码如何管理和控制的，可能收效甚微。最简单有效的策略是，直接给出在各种情况下应该敲哪几行命令，比如在提交 MR/PR 前、修改 PR 时、准备合入时敲哪些命令就足够了，而不是详细解释系统执行时的每个细节。而对于版本管理，应该尽可能少地让开发者介入，如果一个策略需要让每个开发者自己去思考每个 patch 应该进哪个版本分支（尤其维护版本过多时），那么这个策略执行时免不了经常出现合错分支（因为每个开发者都可能出现理解偏差、错误操作等）。

对于其他制度的建设也同样如此。对于公司中不同角色，直接明了地告诉他们应该完成的制度中的哪些条款，而不是给出一本厚厚的手册让每个人自己去钻研。例如招聘，对于 manager，他们应当知道招人时应该如何考虑人员成本、hc 等等；但对普通面试官，只需要学习面试中应该问哪些问题，不应该透露哪些信息。
